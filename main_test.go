package main

import (
	"testing"

	"github.com/go-test/deep"
)

func TestBasicCharInterpreting(t *testing.T) {
	given := program{
		data:         make([]byte, 30000),
		stack:        make([]byte, 30000),
		stackPointer: 0,
		dataPointer:  0,
		output:       "",
	}
	given.data = []byte{}
	expected := "ABC"
	given.interpret()
	got := given.output
	if diff := deep.Equal(expected, got); diff != nil {
		t.Logf("expected: %#v", expected)
		t.Logf("got: %#v", got)
		t.Errorf("diff %#v", diff)
	}
}

func TestLoopInterpreting(t *testing.T) {
	given := program{
		data:         make([]byte, 30000),
		stack:        make([]byte, 30000),
		stackPointer: 0,
		dataPointer:  0,
		output:       "",
	}
	given.data = []byte{}
	expected := `Hello World!`
	given.interpret()
	got := given.output
	if diff := deep.Equal(expected, got); diff != nil {
		t.Logf("expected: %#v", expected)
		t.Logf("got: %#v", got)
		t.Errorf("diff %#v", diff)
	}
}
